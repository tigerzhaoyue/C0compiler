OK＜加法运算符＞ ::= +｜-
OK＜乘法运算符＞  ::= *｜/
OK＜关系运算符＞  ::=  <｜<=｜>｜>=｜!=｜==
OK＜字母＞   ::= ＿｜a｜．．．｜z｜A｜．．．｜Z
OK＜数字＞   ::= ０｜＜非零数字＞
OK＜非零数字＞  ::= １｜．．．｜９
OK＜字符＞    ::=  '＜加法运算符＞'｜'＜乘法运算符＞'｜'＜字母＞'｜'＜数字＞'
OK＜字符串＞   ::=  "｛十进制编码为32,33,35-126的ASCII字符｝"


OK＜程序＞    ::= ［＜常量说明＞］［＜变量说明＞］{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞	
OK＜程序＞    ::= ［＜常量说明＞］{＜变量定义＞;}{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞
OK＜常量说明＞ ::=  const＜常量定义＞;{ const＜常量定义＞;}
OK＜常量定义＞   ::=   int＜标识符＞＝＜整数＞{,＜标识符＞＝＜整数＞}
                               | char＜标识符＞＝＜字符＞{,＜标识符＞＝＜字符＞}
OK＜无符号整数＞  ::= ＜非零数字＞｛＜数字＞｝							//POSNUMBER
OK＜整数＞        ::= ［＋｜－］＜无符号整数＞｜０
OK＜标识符＞    ::=  ＜字母＞｛＜字母＞｜＜数字＞｝

OK＜声明头部＞   ::=  int＜标识符＞ |char＜标识符＞
OK＜变量说明＞  ::= ＜变量定义＞;{＜变量定义＞;}							//没用
OK＜变量定义＞  ::= ＜类型标识符＞(＜标识符＞|＜标识符＞‘[’＜无符号整数＞‘]’){,(＜标识符＞|＜标识符＞‘[’＜无符号整数＞‘]’ )}
OK＜常量＞   ::=  ＜整数＞|＜字符＞
OK＜类型标识符＞      ::=  int | char
OK＜有返回值函数定义＞  ::=  ＜声明头部＞‘(’＜参数＞‘)’ ‘{’＜复合语句＞‘}’
OK＜无返回值函数定义＞  ::= void＜标识符＞‘(’＜参数＞‘)’‘{’＜复合语句＞‘}’

OK＜复合语句＞   ::=  ［＜常量说明＞］［＜变量说明＞］＜语句列＞
OK＜参数＞    ::= ＜参数表＞
OK＜参数表＞    ::=  ＜类型标识符＞＜标识符＞{,＜类型标识符＞＜标识符＞}| ＜空＞

OK＜主函数＞    ::= void main‘(’‘)’‘{’＜复合语句＞‘}’

OK＜表达式＞    ::= ［＋｜－］＜项＞{＜加法运算符＞＜项＞}
OK＜项＞     ::= ＜因子＞{＜乘法运算符＞＜因子＞}
OK＜因子＞    ::= ＜标识符＞｜＜标识符＞‘[’＜表达式＞‘]’|‘(’＜表达式＞‘)’｜＜整数＞|＜字符＞｜＜有返回值函数调用语句＞


OK＜语句＞    ::= ＜条件语句＞｜＜循环语句＞| ‘{’＜语句列＞‘}’｜＜有返回值函数调用语句＞; 
                           |＜无返回值函数调用语句＞;｜＜赋值语句＞;｜＜读语句＞;｜＜写语句＞;｜＜空＞;|＜情况语句＞｜＜返回语句＞;		//赋值、两种函数调用first集一样
OK＜赋值语句＞   ::=  ＜标识符＞＝＜表达式＞|＜标识符＞‘[’＜表达式＞‘]’=＜表达式＞
OK＜条件语句＞  ::=  if ‘(’＜条件＞‘)’＜语句＞
OK＜条件＞    ::=  ＜表达式＞＜关系运算符＞＜表达式＞｜＜表达式＞ //表达式为0条件为假，否则为真
OK＜循环语句＞   ::=  while ‘(’＜条件＞‘)’＜语句＞
OK＜情况语句＞  ::=  switch ‘(’＜表达式＞‘)’ ‘{’＜情况表＞＜缺省＞ ‘}’
OK＜情况表＞   ::=  ＜情况子语句＞{＜情况子语句＞}
OK＜情况子语句＞  ::=  case＜常量＞：＜语句＞
OK＜缺省＞   ::=  default : ＜语句＞|＜空＞
OK＜有返回值函数调用语句＞ ::= ＜标识符＞‘(’＜值参数表＞‘)’
OK＜无返回值函数调用语句＞ ::= ＜标识符＞‘(’＜值参数表＞‘)’
OK＜值参数表＞   ::= ＜表达式＞{,＜表达式＞}｜＜空＞
OK＜语句列＞   ::= ｛＜语句＞｝
OK＜读语句＞    ::=  scanf ‘(’＜标识符＞{,＜标识符＞}‘)’
OK＜写语句＞    ::= printf ‘(’ ＜字符串＞,＜表达式＞ ‘)’| printf ‘(’＜字符串＞ ‘)’| printf ‘(’＜表达式＞‘)’
OK＜返回语句＞   ::=  return[‘(’＜表达式＞‘)’]


































/*
<程序>          ::=   <分程序>.
<分程序>        ::=   [<常量说明部分>][<变量说明部分>]{[<过程说明部分>]| [<函数说明部分>]}<复合语句>
<常量说明部分>  ::=   const<常量定义>{,<常量定义>};
<常量定义>      ::=    <标识符>＝ <常量>
<常量>          ::=    [+| -] <无符号整数>|<字符>
<字符>          ::=  '<字母>' | '<数字>'
<字符串>        ::= "{十进制编码为32,33,35-126的ASCII字符}"
<无符号整数>    ::=   <数字>{<数字>}
<标识符>        ::=   <字母>{<字母>|<数字>}
<变量说明部分>  ::=   var <变量说明> ; {<变量说明>;}
<变量说明>      ::=   <标识符>{, <标识符>} : <类型>
<类型>          ::=   <基本类型>|array'['<无符号整数>']' of <基本类型>
<基本类型>      ::=   integer | char
<过程说明部分>  ::=  <过程首部><分程序>{; <过程首部><分程序>};
<函数说明部分>  ::=  <函数首部><分程序>{; <函数首部><分程序>};
<过程首部>      ::=   procedure<标识符>[<形式参数表>];
<函数首部>      ::=   function <标识符>[<形式参数表>]: <基本类型>;
<形式参数表>    ::= '('<形式参数段>{; <形式参数段>}')'
<形式参数段>    ::=   [var]<标识符>{, <标识符>}: <基本类型>
<语句>          ::=   <赋值语句>|<条件语句>|<当循环语句>|<过程调用语句>|<复合语句>|<读语句>|<写语句>|<for循环语句>|<空>
<赋值语句>      ::=  <标识符> := <表达式>| <函数标识符> := <表达式> | <标识符>'['<表达式>']':= <表达式>
<函数标识符>    ::=  <标识符>
<表达式>        ::=   [+|-]<项>{<加法运算符><项>}
<项>            ::=   <因子>{<乘法运算符><因子>}
<因子>          ::=   <标识符>|<标识符>'['<表达式>']'|<无符号整数>| '('<表达式>')' | <函数调用语句>
<函数调用语句>  ::=   <标识符>[<实在参数表>]
<实在参数表>    ::= '(' <实在参数> {, <实在参数>}')'
<实在参数>      ::=   <表达式>
<加法运算符>    ::=   +|-
<乘法运算符>    ::=   *|/
<条件>          ::=   <表达式><关系运算符><表达式>
<关系运算符>    ::=   <|<=|>|>= |=|<>
<条件语句>      ::=   if<条件>then<语句> | if<条件>then<语句>else<语句>
<当循环语句>    ::=   do<语句> while<条件>
<for循环语句>   ::=   for <标识符>  := <表达式> （downto | to） <表达式> do <语句> //步长为1
<过程调用语句>  ::=  <标识符>[<实在参数表>]
<复合语句>      ::=   begin<语句>{; <语句>}end
<读语句>        ::=   read'('<标识符>{,<标识符>}')'
<写语句>        ::=   write'('<字符串>,<表达式>')'|write'('<字符串>')'|write'('<表达式>')'
<字母>          ::=   a|b|c|d…x|y|z |A|B…|Z
<数字>          ::=   0|1|2|3…8|9
*/